[{"C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\reactOneInternship\\src\\index.js":"1","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\reactOneInternship\\src\\App.js":"2","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\reactOneInternship\\src\\reportWebVitals.js":"3","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\reactOneInternship\\src\\Pages\\Form.js":"4","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\reactOneInternship\\src\\components\\CustomButton.js":"5","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\Sample-Form-Project\\src\\index.js":"6","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\Sample-Form-Project\\src\\reportWebVitals.js":"7","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\Sample-Form-Project\\src\\App.js":"8","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\Sample-Form-Project\\src\\Pages\\Form.js":"9","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\Sample-Form-Project\\src\\components\\CustomButton.js":"10"},{"size":461,"mtime":1629923390016,"results":"11","hashOfConfig":"12"},{"size":153,"mtime":1629923390010,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1629923390018,"results":"14","hashOfConfig":"12"},{"size":10255,"mtime":1630005075280,"results":"15","hashOfConfig":"12"},{"size":265,"mtime":1629923390014,"results":"16","hashOfConfig":"12"},{"size":461,"mtime":1629923390016,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1629923390018,"results":"19","hashOfConfig":"18"},{"size":153,"mtime":1629923390010,"results":"20","hashOfConfig":"18"},{"size":10255,"mtime":1633182918935,"results":"21","hashOfConfig":"18"},{"size":265,"mtime":1629923390014,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4epf9z",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1izb4lx",{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\reactOneInternship\\src\\index.js",[],"C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\reactOneInternship\\src\\App.js",["46"],"import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Form from \"./Pages/Form\";\r\n\r\nfunction App() {\r\n  return <Form />;\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\reactOneInternship\\src\\reportWebVitals.js",[],"C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\reactOneInternship\\src\\Pages\\Form.js",["47"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport axios from \"axios\";\r\nimport CustomButton from \"../components/CustomButton\";\r\nimport clsx from \"clsx\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  box: {\r\n    margin: \"100px\",\r\n    display: \"flex\",\r\n  },\r\n  outerBox: {\r\n    marginTop: \"25px\",\r\n    marginLeft:\"500px\",\r\n    display: \"flex\",\r\n  },\r\n  innerBox: {\r\n    margin: \"25px\",\r\n  },\r\n  buttonGroup: {\r\n    marginRight: \"25px\",\r\n  },\r\n  button: {\r\n    marginRight: \"100px\",\r\n  },\r\n  formControl: {\r\n    minWidth: 120,\r\n  },\r\n\r\n  TextField: {\r\n    background: '#E9A3A2',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n  },\r\n  \r\n});\r\n\r\n\r\nconst Form = () => {\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [surname, setSurname] = useState(\"\");\r\n  const [weight, setWeight] = useState(0);\r\n  const [height, setHeight] = useState(0);\r\n  const [gender, setGender] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [countries, setCountries] = useState([]);\r\n  const [isImperialUnit, setIsImperialUnit] = useState(false);\r\n  const [rows, setRows] = useState([]);\r\n\r\n  const switchRef = useRef();\r\n\r\n  useEffect(() => {\r\n    getCountries();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const savedUserInfo = localStorage.getItem(\"userInformation\");\r\n    JSON.parse(savedUserInfo)?.isImperialUnit &&\r\n      setIsImperialUnit(JSON.parse(savedUserInfo).isImperialUnit);\r\n  }, []);\r\n\r\n  const surnameHandler = (value) => {\r\n    setSurname(value);\r\n  };\r\n\r\n  const userNameHandler = (value) => {\r\n    setUserName(value);\r\n  };\r\n\r\n  const weightHandler = (value) => {\r\n    setWeight(value);\r\n  };\r\n\r\n  const heightHandler = (value) => {\r\n    setHeight(value);\r\n  };\r\n\r\n  const genderHandler = (value) => {\r\n    setGender(value);\r\n  };\r\n\r\n  const unitHandler = () => {\r\n    setIsImperialUnit((oldState) => !oldState);\r\n  };\r\n\r\n  const countryHandler = (value) => {\r\n    setCountry(value);\r\n  };\r\n\r\n  const getSwitchInfo = () => {\r\n    console.log(switchRef);\r\n  };\r\n\r\n  const rowsHandler = (userInfo) => {\r\n    setRows([...rows, userInfo]);\r\n  };\r\n\r\n  const clearHandler = () => {\r\n    setRows([]);\r\n  };\r\n\r\n  const checkCountryArray = (rows, index) => {\r\n    if (countries.length > 0) {\r\n      return countries[rows[index].country].countryName;\r\n    }\r\n  };\r\n\r\n  const submitHandler = () => {\r\n    const userInfo = {\r\n      surname,\r\n      weight,\r\n      height,\r\n      userName,\r\n      gender,\r\n      isImperialUnit,\r\n      country,\r\n    };\r\n\r\n\r\n    rowsHandler(userInfo);\r\n\r\n    const stringUserInfo = JSON.stringify(userInfo);\r\n    localStorage.setItem(\"userInformation\", stringUserInfo);\r\n  };\r\n\r\n  const getCountries = () => {\r\n    axios.get(\"https://countriesnow.space/api/v0.1/countries\").then((res) => {\r\n      const countryArr = res.data.data.map((countryItem, index) => {\r\n        return { countryName: countryItem.country, id: index };\r\n      });\r\n\r\n      setCountries(countryArr);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box classes={classes.box}>\r\n      <Box className={classes.outerBox}>\r\n        <Box className={classes.innerBox}>\r\n          <TextField\r\n            id=\"name-input\"\r\n            label=\"Name\"\r\n            variant=\"outlined\"\r\n            onChange={(e) => userNameHandler(e.target.value)}\r\n            className={classes.TextField}\r\n          />\r\n        </Box>\r\n        <Box className={classes.innerBox}>\r\n          <TextField\r\n            required\r\n            id=\"surname-input\"\r\n            label=\"Surname\"\r\n            variant=\"outlined\"\r\n            onChange={(e) => surnameHandler(e.target.value)}\r\n            className={classes.TextField}\r\n          />\r\n        </Box>\r\n        <Box className={classes.innerBox}>\r\n          <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"coutry-label\">Country</InputLabel>\r\n            <Select\r\n              labelId=\"country-label\"\r\n              id=\"country-select\"\r\n              value={country}\r\n              onChange={(e) => countryHandler(e.target.value)}\r\n            >\r\n              {countries.map((item) => (\r\n                <MenuItem key={item.id} value={item.id}>\r\n                  {item.countryName}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n      </Box>\r\n      <Box className={classes.outerBox}>\r\n        \r\n        <Box className={classes.innerBox}>\r\n          <TextField\r\n            label=\"Weight\"\r\n            type=\"number\"\r\n            id=\"weight-input\"\r\n            onChange={(e) => weightHandler(e.target.value)}\r\n            className={classes.TextField}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  {isImperialUnit ? \"Lbs\" : \"Kg\"}\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Box>\r\n        <Box className={classes.innerBox}>\r\n          <TextField\r\n            ref={switchRef}\r\n            label=\"Height\"\r\n            id=\"height-input\"\r\n            type=\"number\"\r\n            onChange={(e) => heightHandler(e.target.value)}\r\n            className={classes.TextField}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  {isImperialUnit ? \"Inc\" : \"Cm\"}\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Box>\r\n        \r\n        <Box className={classes.innerBox}>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={isImperialUnit}\r\n                onChange={() => unitHandler()}\r\n                name=\"checkedA\"\r\n                inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n              />\r\n            }\r\n            label=\"Is Unit Imperial\"\r\n            labelPlacement=\"top\"\r\n          />\r\n        </Box>\r\n        <Box className={classes.innerBox}>\r\n          <FormControl\r\n            className={clsx(classes.buttonGroup, classes.button)}\r\n            component=\"fieldset\"\r\n          >\r\n            <FormLabel component=\"legend\">Gender</FormLabel>\r\n            <RadioGroup\r\n              aria-label=\"gender\"\r\n              name=\"gender1\"\r\n              value={gender}\r\n              onChange={(e) => genderHandler(e.target.value)}\r\n            >\r\n              <FormControlLabel\r\n                value=\"female\"\r\n                control={<Radio />}\r\n                label=\"Female\"\r\n              />\r\n              <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n              <FormControlLabel\r\n                value=\"other\"\r\n                control={<Radio />}\r\n                label=\"Other\"\r\n              />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </Box>\r\n        </Box>\r\n        <Box className={classes.outerBox}>\r\n          <Box className={classes.innerBox}>\r\n            <CustomButton\r\n              buttonFunction={() => submitHandler()}\r\n              buttonText={\"Submit\"}\r\n            ></CustomButton>\r\n          </Box>\r\n          <Box className={classes.innerBox}>\r\n            <CustomButton\r\n              buttonFunction={() => getSwitchInfo()}\r\n              buttonText={\"Get Ref Info\"}\r\n            ></CustomButton>\r\n          </Box>\r\n\r\n          \r\n        </Box>\r\n\r\n        <Box className={classes.outerBox}>\r\n          <Box className={classes.innerBox}>\r\n            <TableContainer component={Paper}>\r\n              <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell align=\"right\">Surname</TableCell>\r\n                    <TableCell align=\"right\">Country</TableCell>\r\n                    <TableCell align=\"right\">Weight&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">Height&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">Gender</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n\r\n                  {rows.map((row, index) => (\r\n                    <TableRow key={index}>\r\n\r\n                      <TableCell align=\"right\">{rows[index].userName}</TableCell>\r\n                      <TableCell align=\"right\">{rows[index].surname}</TableCell>\r\n                      <TableCell align=\"right\">{countries[rows[index].country].countryName}</TableCell>\r\n                      <TableCell align=\"right\">{rows[index].weight}</TableCell>\r\n                      <TableCell align=\"right\">{rows[index].height}</TableCell>\r\n                      <TableCell align=\"right\">{rows[index].gender}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Box>\r\n          <Box className={classes.innerBox}>\r\n          <CustomButton\r\n            buttonFunction={() => clearHandler()}\r\n            buttonText={\"Clear\"}\r\n          ></CustomButton>\r\n            \r\n          </Box>\r\n        </Box>\r\n\r\n      \r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\reactOneInternship\\src\\components\\CustomButton.js",[],["48","49"],"C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\Sample-Form-Project\\src\\index.js",[],"C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\Sample-Form-Project\\src\\reportWebVitals.js",[],"C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\Sample-Form-Project\\src\\App.js",["50"],"C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\Sample-Form-Project\\src\\Pages\\Form.js",["51"],"C:\\Users\\furka\\OneDrive\\Belgeler\\GitHub\\Sample-Form-Project\\src\\components\\CustomButton.js",[],{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":129,"column":9,"nodeType":"54","messageId":"55","endLine":129,"endColumn":26},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":129,"column":9,"nodeType":"54","messageId":"55","endLine":129,"endColumn":26},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'checkCountryArray' is assigned a value but never used.","no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-global-assign","no-unsafe-negation"]